# Generated by Django 4.0.2 on 2022-02-17 21:18

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import registry.models
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Set a name for this activity', max_length=140)),
                ('activity_type', models.IntegerField(choices=[(0, 'NA'), (1, 'Open'), (2, 'Specific')], default=0, help_text='Set the activity type and the airspace')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('address_line_1', models.CharField(max_length=140)),
                ('address_line_2', models.CharField(blank=True, max_length=140, null=True)),
                ('address_line_3', models.CharField(blank=True, max_length=140, null=True)),
                ('postcode', models.CharField(max_length=10, verbose_name='post code')),
                ('city', models.CharField(help_text='Set a city for this address', max_length=140)),
                ('state', models.CharField(blank=True, choices=[('AN', 'Andaman and Nicobar Islands'), ('AP', 'Andhra Pradesh'), ('AR', 'Arunachal Pradesh'), ('AS', 'Assam'), ('BR', 'Bihar'), ('CG', 'Chandigarh'), ('CH', 'Chhattisgarh'), ('DN', 'Dadra and Nagar Haveli'), ('DD', 'Daman and Diu'), ('DL', 'Delhi'), ('GA', 'Goa'), ('GJ', 'Gujarat'), ('HR', 'Haryana'), ('HP', 'Himachal Pradesh'), ('JK', 'Jammu and Kashmir'), ('JH', 'Jharkhand'), ('KA', 'Karnataka'), ('KL', 'Kerala'), ('LA', 'Ladakh'), ('LD', 'Lakshadweep'), ('MP', 'Madhya Pradesh'), ('MH', 'Maharashtra'), ('MN', 'Manipur'), ('ML', 'Meghalaya'), ('MZ', 'Mizoram'), ('NL', 'Nagaland'), ('OR', 'Odisha'), ('PY', 'Puducherry'), ('PB', 'Punjab'), ('RJ', 'Rajasthan'), ('SK', 'Sikkim'), ('TN', 'Tamil Nadu'), ('TS', 'Telangana'), ('TR', 'Tripura'), ('UP', 'Uttar Pradesh'), ('UK', 'Uttarakhand'), ('WB', 'West Bengal')], help_text='Pick a state, at the moment only Indian States are configured.', max_length=2, null=True)),
                ('country', models.CharField(choices=[('IN', 'INDIA')], default='IN', max_length=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AerobridgeDocument',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(help_text='Give a name for this document')),
                ('url', models.URLField(blank=True, default='https://raw.githubusercontent.com/openskies-sh/aerobridge/master/sample-data/Aerobridge-placeholder-document.pdf', null=True, validators=[registry.models.validate_url])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Aircraft',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Set the internal name of the aircraft e.g. F1 #2', max_length=280)),
                ('flight_controller_id', models.CharField(help_text='This is the Drone ID from the RFM, if there are spaces in the ID, remove them', max_length=140, validators=[registry.models.validate_flight_controller_id])),
                ('category', models.IntegerField(choices=[(0, 'Other'), (1, 'FIXED WING'), (2, 'ROTORCRAFT'), (3, 'LIGHTER-THAN-AIR'), (4, 'HYBRID LIFT'), (5, 'MICRO'), (6, 'SMALL'), (7, 'MEIDUM'), (8, 'Large')], default=0, help_text='Set the category for this aircraft, use the closest aircraft type')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, help_text='Set the status of this drone, if it is set as inactive, the GCS might fail and flight plans might not be able to load on the drone')),
                ('photo', models.URLField(default='https://raw.githubusercontent.com/openskies-sh/aerobridge/master/sample-data/Aerobridge-placeholder-document.pdf', help_text='A URL of a photo of the drone')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AircraftComponent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('supplier_part_id', models.CharField(help_text='The part ID provided by the supplier / contract manufacturer', max_length=280)),
                ('custody_on', models.DateTimeField(blank=True, help_text='Enter a date when this component was in custody of the manufacturer', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('custody_status', models.IntegerField(choices=[(0, 'Created'), (1, 'Ordered'), (2, 'In Transit'), (3, 'Received'), (4, 'Installed'), (5, 'Discarded / Removed')], default=0, help_text='Set the component status as it moves through the supply chain')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AircraftMasterComponent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=280)),
                ('family', models.IntegerField(choices=[(0, 'Frame'), (1, 'Motors'), (2, 'Electronic Speed Controller'), (3, 'Flight Controller'), (4, 'Power Distribution Board'), (5, 'Battery'), (6, 'Propellors'), (7, 'Camera'), (8, 'GPS'), (9, 'Battery Charger'), (10, 'Telemetry Link'), (11, 'Remote Controller'), (12, 'Landing Gear'), (13, 'GPS'), (14, 'Companion Computer')], default=1, help_text='Set the component family')),
                ('drawing', models.URLField(blank=True, help_text='A URL to a photo of the component drawing.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AircraftModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=280)),
                ('popular_name', models.CharField(max_length=140)),
                ('series', models.IntegerField(default=1, help_text='Define the production series for this Aircraft Model')),
                ('max_endurance', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the endurance in minutes', max_digits=10)),
                ('max_range', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the range in kms for the drone', max_digits=10)),
                ('max_speed', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the maximum speed in km/hr.', max_digits=10)),
                ('dimension_length', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the length of the drone in cms', max_digits=10)),
                ('dimension_breadth', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the breadth of the drone in cms', max_digits=10)),
                ('dimension_height', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the height of the drone in cms', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Authorization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=140)),
                ('operation_max_height', models.IntegerField(default=0, help_text='Set the maximum authorized height for this authorization')),
                ('operation_altitude_system', models.IntegerField(choices=[(0, 'wgs84'), (1, 'amsl'), (2, 'agl'), (3, 'sps')], default=0, help_text='Set the altitude system')),
                ('airspace_type', models.IntegerField(choices=[(0, 'NA'), (1, 'Green'), (2, 'Amber'), (3, 'Red')], default=0, help_text='Set the airspace type, if available')),
                ('permit_to_fly_above_crowd', models.BooleanField(default=0, help_text='Select if the company is permitted to fly above crowd')),
                ('operation_area_type', models.IntegerField(choices=[(0, 'Unpopulated'), (1, 'Sparsely Populated'), (2, 'Densely Populated')], default=0, help_text='Can the operator fly over crowds? ')),
                ('risk_type', models.IntegerField(choices=[(0, 'NA'), (1, 'SAIL 1'), (2, 'SAIL 2'), (3, 'SAIL 3'), (4, 'SAIL 4'), (5, 'SAIL 5'), (6, 'SAIL 6')], default=0, help_text='If available, set the airspace risk type')),
                ('authorization_type', models.IntegerField(choices=[(0, 'NA'), (1, 'Light UAS Operator Certificate'), (2, 'Standard Scenario Authorization')], default=0, help_text='Set the type of the authorization')),
                ('end_date', models.DateTimeField(default=registry.models.two_year_expiration, help_text='By default every authorization exipres in two years, you can set a different end date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Firmware',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('binary_file_url', models.URLField(help_text='Enter a url from where the firmware can be downloaded')),
                ('binary_file_hash', models.TextField(help_text='Enter a SHA / Digest for the firmware, used to secure the firmware')),
                ('version', models.CharField(help_text='Set a semantic version for the firmware version', max_length=25)),
                ('friendly_name', models.CharField(help_text='Give it a friendly name e.g. May-2021 1.2 release', max_length=140)),
                ('is_active', models.BooleanField(default=False, help_text="Set if the firmware is active, don't forget to mark old firmware as inactive")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('company_name', models.CharField(help_text='Official Name of the company as in the Company Registration Office', max_length=28, validators=[django.core.validators.RegexValidator(message='No special characters allowed in this field.', regex='^[-, ,_\\w]*$')])),
                ('website', models.URLField(help_text='Put official URL of the company, if none is available then a manufacturers public facing URL is necessary')),
                ('email', models.EmailField(help_text='Contact email for support and other queries', max_length=254)),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('expiration', models.DateTimeField(default=registry.models.two_year_expiration)),
                ('operator_type', models.IntegerField(choices=[(0, 'NA'), (1, 'LUC'), (2, 'Non-LUC'), (3, 'AUTH'), (4, 'DEC')], default=0, help_text='Choose what kind of operator this is, classify the operator based on capabilites, use the adminsitration panel to add additional operator categories')),
                ('vat_number', models.CharField(blank=True, default='VAT-TMP', help_text='VAT / Tax number if available', max_length=25, null=True, validators=[django.core.validators.RegexValidator(message='No special characters allowed in this field.', regex='^[-, ,_\\w]*$')])),
                ('insurance_number', models.CharField(blank=True, default='INS-TMP', help_text='Insurance number if avaialble', max_length=25, null=True, validators=[django.core.validators.RegexValidator(message='No special characters allowed in this field.', regex='^[-, ,_\\w]*$')])),
                ('company_number', models.CharField(blank=True, default='CO-TMP', help_text='Company number if available ', max_length=25, null=True, validators=[django.core.validators.RegexValidator(message='No special characters allowed in this field.', regex='^[-, ,_\\w]*$')])),
                ('country', models.CharField(choices=[('IN', 'INDIA')], default='IN', help_text='At the moment only India is configured, you can setup your own country', max_length=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(help_text='Select the official address for the company', on_delete=django.db.models.deletion.CASCADE, to='registry.address')),
                ('authorized_activities', models.ManyToManyField(help_text='Related to Authorization, select the kind of activities that this operator is allowed to conduct, you can add additional activities using the administration panel', related_name='authorized_activities', to='registry.Activity')),
                ('operational_authorizations', models.ManyToManyField(help_text='Choose what kind of authorization this operator posseses, to add additional authorizations, use the administration panel', related_name='operational_authorizations', to='registry.Authorization')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(help_text='The first name of the person added to the database', max_length=30)),
                ('middle_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.EmailField(help_text='Associate a email address with the person, this field is required', max_length=254)),
                ('phone_number', models.CharField(help_text='Associate a phone number with this person', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('social_security_number', models.CharField(blank=True, help_text='If social security / identification number is avaialble associate it with a person', max_length=25, null=True)),
                ('date_of_birth', models.DateField(blank=True, help_text='Assign a date of birth with this person', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('documents', models.ManyToManyField(to='registry.AerobridgeDocument')),
            ],
        ),
        migrations.CreateModel(
            name='Pilot',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('photo', models.URLField(blank=True, help_text='A URL to link to a photo of the pilot', null=True, validators=[registry.models.validate_url])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=0, help_text='Is this pilot active? If he is not working for the company or has moved on, set it as inactive')),
                ('address', models.ForeignKey(help_text='Assign a address to this Pilot', on_delete=django.db.models.deletion.CASCADE, to='registry.address')),
                ('documents', models.ManyToManyField(to='registry.AerobridgeDocument')),
                ('operator', models.ForeignKey(help_text='Assign this pilot to a operator', on_delete=django.db.models.deletion.CASCADE, to='registry.operator')),
                ('person', models.OneToOneField(help_text='Assign this pilot to a person object in the database', on_delete=django.db.models.deletion.CASCADE, to='registry.person')),
            ],
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('test_type', models.IntegerField(choices=[(0, 'Remote pilot online theoretical competency'), (1, 'Certificate of remote pilot competency'), (2, 'Other')], default=0, help_text='Specify the type of test')),
                ('taken_at', models.IntegerField(choices=[(0, 'Online Test'), (1, 'In Authorized Test Center'), (2, 'Other')], default=0, help_text='Specify where this test was taken')),
                ('name', models.CharField(help_text='Set a name for this test that can be understood', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TypeCertificate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_certificate_id', models.CharField(max_length=280)),
                ('type_certificate_issuing_country', models.CharField(max_length=280)),
                ('type_certificate_holder', models.CharField(max_length=140)),
                ('type_certificate_holder_country', models.CharField(max_length=140)),
            ],
        ),
        migrations.CreateModel(
            name='TestValidity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('taken_at', models.DateTimeField(blank=True, null=True)),
                ('expiration', models.DateTimeField(blank=True, null=True)),
                ('pilot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.pilot')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='registry.test')),
            ],
        ),
        migrations.AddField(
            model_name='pilot',
            name='tests',
            field=models.ManyToManyField(help_text='Specify the tests if any the pilot has taken', through='registry.TestValidity', to='registry.Test'),
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(help_text='Full legal name of the manufacturing entity', max_length=140)),
                ('common_name', models.CharField(help_text='Common name for the manufacturer e.g. Skydio', max_length=140)),
                ('acronym', models.CharField(help_text='If you use a acronym for this manufacturer, you can assign it here', max_length=10)),
                ('role', models.CharField(help_text='e.g. Reseller, distributor, OEM etc.', max_length=140)),
                ('country', models.CharField(help_text='The three-letter ISO 3166-1 country code where the manufacturer is located', max_length=3)),
                ('digital_sky_id', models.CharField(default='NA', help_text='Use the Digital Sky portal to create a Manufacturer profile and get an ID, paste it here', max_length=140)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, help_text='Assign a address to this manufacturers', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.address')),
                ('documents', models.ManyToManyField(to='registry.AerobridgeDocument')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalAircraftModel',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=280)),
                ('popular_name', models.CharField(max_length=140)),
                ('series', models.IntegerField(default=1, help_text='Define the production series for this Aircraft Model')),
                ('max_endurance', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the endurance in minutes', max_digits=10)),
                ('max_range', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the range in kms for the drone', max_digits=10)),
                ('max_speed', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the maximum speed in km/hr.', max_digits=10)),
                ('dimension_length', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the length of the drone in cms', max_digits=10)),
                ('dimension_breadth', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the breadth of the drone in cms', max_digits=10)),
                ('dimension_height', models.DecimalField(decimal_places=2, default=0.0, help_text='Set the height of the drone in cms', max_digits=10)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('firmware', models.ForeignKey(blank=True, db_constraint=False, help_text='Associate a firmware with this aircraft model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.firmware')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical aircraft model',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAircraftMasterComponent',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=280)),
                ('family', models.IntegerField(choices=[(0, 'Frame'), (1, 'Motors'), (2, 'Electronic Speed Controller'), (3, 'Flight Controller'), (4, 'Power Distribution Board'), (5, 'Battery'), (6, 'Propellors'), (7, 'Camera'), (8, 'GPS'), (9, 'Battery Charger'), (10, 'Telemetry Link'), (11, 'Remote Controller'), (12, 'Landing Gear'), (13, 'GPS'), (14, 'Companion Computer')], default=1, help_text='Set the component family')),
                ('drawing', models.URLField(blank=True, help_text='A URL to a photo of the component drawing.', null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical aircraft master component',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAircraftDetail',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('mass', models.IntegerField(default=300, help_text="Set the vehicle's mass in gms.")),
                ('sub_category', models.IntegerField(choices=[(0, 'Other'), (1, 'AIRPLANE'), (2, 'NONPOWERED GLIDER'), (3, 'POWERED GLIDER'), (4, 'HELICOPTER'), (5, 'GYROPLANE'), (6, 'BALLOON'), (7, 'AIRSHIP'), (8, 'UAV'), (9, 'Multirotor'), (10, 'Hybrid')], default=7)),
                ('max_certified_takeoff_weight', models.DecimalField(decimal_places=3, default=0.0, help_text='Set the takeoff weight for the aircraft in gms.', max_digits=10)),
                ('max_height_attainable', models.DecimalField(decimal_places=3, default=0.0, help_text='Set the max attainable height in meters', max_digits=10)),
                ('is_registered', models.BooleanField(default=False, help_text='Set if the aircraft is registred with the Civil Aviation Authority')),
                ('icao_aircraft_type_designator', models.CharField(blank=True, default='0000', help_text='If available you can specify the type designator, see https://www.icao.int/publications/doc8643/pages/search.aspx', max_length=4, null=True)),
                ('registration_mark', models.CharField(blank=True, help_text='Set the registration mark for this aircraft, if applicable', max_length=10, null=True)),
                ('commission_date', models.DateTimeField(blank=True, null=True)),
                ('digital_sky_uin_number', models.CharField(blank=True, help_text='Get a UIN number for this aircraft using the Digital Sky Portal', max_length=140, null=True)),
                ('operating_frequency', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('manufactured_at', models.DateTimeField(blank=True, help_text='Set the date when the drone was assembled / manufactured', null=True)),
                ('identification_photo', models.URLField(blank=True, help_text='A URL to a photo of the drone ID or other identifying image of the drone.', null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('aircraft', models.ForeignKey(blank=True, db_constraint=False, help_text='Choose the aircraft', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.aircraft')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('type_certificate', models.ForeignKey(blank=True, db_constraint=False, help_text='Set the type certificate if available for the drone', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.typecertificate')),
            ],
            options={
                'verbose_name': 'historical aircraft detail',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAircraftComponentSignature',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('signature_url', models.URLField(help_text='The digital signature / address of this object on the block chain. Please refer to the README on registering components on the block chain.')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('component', models.ForeignKey(blank=True, db_constraint=False, help_text='Select a component to link to', limit_choices_to={'is_active': True}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.aircraftcomponent')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical aircraft component signature',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAircraftComponent',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('supplier_part_id', models.CharField(help_text='The part ID provided by the supplier / contract manufacturer', max_length=280)),
                ('custody_on', models.DateTimeField(blank=True, help_text='Enter a date when this component was in custody of the manufacturer', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('custody_status', models.IntegerField(choices=[(0, 'Created'), (1, 'Ordered'), (2, 'In Transit'), (3, 'Received'), (4, 'Installed'), (5, 'Discarded / Removed')], default=0, help_text='Set the component status as it moves through the supply chain')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('master_component', models.ForeignKey(blank=True, db_constraint=False, help_text='Set the master component associated with this component', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.aircraftmastercomponent')),
            ],
            options={
                'verbose_name': 'historical aircraft component',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAircraft',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(help_text='Set the internal name of the aircraft e.g. F1 #2', max_length=280)),
                ('flight_controller_id', models.CharField(help_text='This is the Drone ID from the RFM, if there are spaces in the ID, remove them', max_length=140, validators=[registry.models.validate_flight_controller_id])),
                ('category', models.IntegerField(choices=[(0, 'Other'), (1, 'FIXED WING'), (2, 'ROTORCRAFT'), (3, 'LIGHTER-THAN-AIR'), (4, 'HYBRID LIFT'), (5, 'MICRO'), (6, 'SMALL'), (7, 'MEIDUM'), (8, 'Large')], default=0, help_text='Set the category for this aircraft, use the closest aircraft type')),
                ('status', models.IntegerField(choices=[(0, 'Inactive'), (1, 'Active')], default=1, help_text='Set the status of this drone, if it is set as inactive, the GCS might fail and flight plans might not be able to load on the drone')),
                ('photo', models.URLField(default='https://raw.githubusercontent.com/openskies-sh/aerobridge/master/sample-data/Aerobridge-placeholder-document.pdf', help_text='A URL of a photo of the drone')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('manufacturer', models.ForeignKey(blank=True, db_constraint=False, help_text='Associate a manufacturer in the database to this aircraft', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.manufacturer')),
                ('model', models.ForeignKey(blank=True, db_constraint=False, help_text='Assign a model to this aircraft', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.aircraftmodel')),
                ('operator', models.ForeignKey(blank=True, db_constraint=False, help_text='Associate a operator to this Aircraft', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registry.operator')),
            ],
            options={
                'verbose_name': 'historical aircraft',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='firmware',
            name='manufacturer',
            field=models.ForeignKey(help_text='Associate a manufacturer to the firmware', on_delete=django.db.models.deletion.CASCADE, to='registry.manufacturer'),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role_type', models.IntegerField(choices=[(0, 'Other'), (1, 'Responsible')], default=0, help_text='A contact may or may not be legally responsible officer within a company, specify if the contact is responsisble (legally) for operations in the company')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(help_text='Add a address for this contact', on_delete=django.db.models.deletion.CASCADE, to='registry.address')),
                ('operator', models.ForeignKey(help_text='Set a operator for this contact', on_delete=django.db.models.deletion.CASCADE, related_name='person_contact', to='registry.operator')),
                ('person', models.ForeignKey(help_text='Associate a person for this contact', on_delete=django.db.models.deletion.CASCADE, to='registry.person')),
            ],
        ),
        migrations.AddField(
            model_name='aircraftmodel',
            name='firmware',
            field=models.ForeignKey(help_text='Associate a firmware with this aircraft model', on_delete=django.db.models.deletion.CASCADE, to='registry.firmware'),
        ),
        migrations.AddField(
            model_name='aircraftmodel',
            name='master_components',
            field=models.ManyToManyField(to='registry.AircraftMasterComponent'),
        ),
        migrations.CreateModel(
            name='AircraftDetail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mass', models.IntegerField(default=300, help_text="Set the vehicle's mass in gms.")),
                ('sub_category', models.IntegerField(choices=[(0, 'Other'), (1, 'AIRPLANE'), (2, 'NONPOWERED GLIDER'), (3, 'POWERED GLIDER'), (4, 'HELICOPTER'), (5, 'GYROPLANE'), (6, 'BALLOON'), (7, 'AIRSHIP'), (8, 'UAV'), (9, 'Multirotor'), (10, 'Hybrid')], default=7)),
                ('max_certified_takeoff_weight', models.DecimalField(decimal_places=3, default=0.0, help_text='Set the takeoff weight for the aircraft in gms.', max_digits=10)),
                ('max_height_attainable', models.DecimalField(decimal_places=3, default=0.0, help_text='Set the max attainable height in meters', max_digits=10)),
                ('is_registered', models.BooleanField(default=False, help_text='Set if the aircraft is registred with the Civil Aviation Authority')),
                ('icao_aircraft_type_designator', models.CharField(blank=True, default='0000', help_text='If available you can specify the type designator, see https://www.icao.int/publications/doc8643/pages/search.aspx', max_length=4, null=True)),
                ('registration_mark', models.CharField(blank=True, help_text='Set the registration mark for this aircraft, if applicable', max_length=10, null=True)),
                ('commission_date', models.DateTimeField(blank=True, null=True)),
                ('digital_sky_uin_number', models.CharField(blank=True, help_text='Get a UIN number for this aircraft using the Digital Sky Portal', max_length=140, null=True)),
                ('operating_frequency', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=10, null=True)),
                ('manufactured_at', models.DateTimeField(blank=True, help_text='Set the date when the drone was assembled / manufactured', null=True)),
                ('identification_photo', models.URLField(blank=True, help_text='A URL to a photo of the drone ID or other identifying image of the drone.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('aircraft', models.OneToOneField(help_text='Choose the aircraft', on_delete=django.db.models.deletion.CASCADE, to='registry.aircraft')),
                ('documents', models.ManyToManyField(to='registry.AerobridgeDocument')),
                ('type_certificate', models.ForeignKey(blank=True, help_text='Set the type certificate if available for the drone', null=True, on_delete=django.db.models.deletion.CASCADE, to='registry.typecertificate')),
            ],
        ),
        migrations.CreateModel(
            name='AircraftComponentSignature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('signature_url', models.URLField(help_text='The digital signature / address of this object on the block chain. Please refer to the README on registering components on the block chain.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('component', models.OneToOneField(help_text='Select a component to link to', limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, to='registry.aircraftcomponent')),
            ],
        ),
        migrations.AddField(
            model_name='aircraftcomponent',
            name='master_component',
            field=models.ForeignKey(help_text='Set the master component associated with this component', on_delete=django.db.models.deletion.CASCADE, to='registry.aircraftmastercomponent'),
        ),
        migrations.AddField(
            model_name='aircraft',
            name='components',
            field=models.ManyToManyField(help_text='Set the components for this aircraft', related_name='aircraft_components', to='registry.AircraftComponent'),
        ),
        migrations.AddField(
            model_name='aircraft',
            name='manufacturer',
            field=models.ForeignKey(help_text='Associate a manufacturer in the database to this aircraft', on_delete=django.db.models.deletion.CASCADE, to='registry.manufacturer'),
        ),
        migrations.AddField(
            model_name='aircraft',
            name='model',
            field=models.ForeignKey(help_text='Assign a model to this aircraft', on_delete=django.db.models.deletion.CASCADE, to='registry.aircraftmodel'),
        ),
        migrations.AddField(
            model_name='aircraft',
            name='operator',
            field=models.ForeignKey(help_text='Associate a operator to this Aircraft', on_delete=django.db.models.deletion.CASCADE, to='registry.operator'),
        ),
    ]
